3. Design at least 8 SQL queries for suitable database application using SQL DML Statements:
   • Location(Location_Id integer, Reginal_Group varchar(20))
   • Department (Department_Id, Name, Location_Id)
   • Job(Job_Id Integer,Function Varchar(30))
   • Employee(Employee_Id, Lastname, Firstname, Middlename, Job_Id, Manager_Id, Hiredate,Salary, Department_Id)
   • Loan(Employee_Id, Firstname , Loan_Amount)
	Sub Query:
	1) Perform all types of JOIN operations on Employee and Loan tables.
	2) Find out no.of employees working in “Sales” department
	3) Find out the employees who are not working in department 10 or 30.
	4) List out the employees whose name start with “s”.
	5) List out employee id, last name in descending order based on the salary column.
	6) How many employees who are working in different departments wise in the organization
	7) Display the employee who got the maximum salary.
	8) Update the employees’ salaries, who are working as Clerk on the basis of 10%.
	9) Delete the employees who are working in accounting department.
	10) List out the department wise maximum salary, minimum salary, average salary of the employees
	11) How many employees who are joined in 1985.
	
-- Create the database
CREATE DATABASE YourDatabaseName;

-- Use the newly created database
USE YourDatabaseName;

-- Create the Location table
CREATE TABLE Location (
    Location_Id INT PRIMARY KEY,
    Reginal_Group VARCHAR(20)
);

-- Create the Department table
CREATE TABLE Department (
    Department_Id INT PRIMARY KEY,
    Name VARCHAR(255),
    Location_Id INT,
    FOREIGN KEY (Location_Id) REFERENCES Location(Location_Id)
);

-- Create the Job table
CREATE TABLE Job (
    Job_Id INT PRIMARY KEY,
    Function VARCHAR(30)
);

-- Create the Employee table
CREATE TABLE Employee (
    Employee_Id INT PRIMARY KEY,
    Lastname VARCHAR(255),
    Firstname VARCHAR(255),
    Middlename VARCHAR(255),
    Job_Id INT,
    Manager_Id INT,
    Hiredate DATE,
    Salary DECIMAL(10, 2),
    Department_Id INT,
    FOREIGN KEY (Job_Id) REFERENCES Job(Job_Id),
    FOREIGN KEY (Manager_Id) REFERENCES Employee(Employee_Id),
    FOREIGN KEY (Department_Id) REFERENCES Department(Department_Id)
);

-- Create the Loan table
CREATE TABLE Loan (
    Employee_Id INT,
    Loan_Amount DECIMAL(10, 2),
    FOREIGN KEY (Employee_Id) REFERENCES Employee(Employee_Id)
);

-- Insert 5 rows into the Location table
INSERT INTO Location (Location_Id, Reginal_Group) VALUES
    (1, 'North'),
    (2, 'South'),
    (3, 'East'),
    (4, 'West'),
    (5, 'Central');

-- Insert 5 rows into the Department table
INSERT INTO Department (Department_Id, Name, Location_Id) VALUES
    (101, 'HR', 1),
    (102, 'Marketing', 2),
    (103, 'Finance', 3),
    (104, 'Engineering', 4),
    (105, 'Sales', 5);

-- Insert 5 rows into the Job table
INSERT INTO Job (Job_Id, Function) VALUES
    (201, 'Manager'),
    (202, 'Engineer'),
    (203, 'Accountant'),
    (204, 'Marketing Specialist'),
    (205, 'Sales Representative');

-- Insert 5 rows into the Employee table
INSERT INTO Employee (Employee_Id, Lastname, Firstname, Middlename, Job_Id, Manager_Id, Hiredate, Salary, Department_Id) VALUES
    (1001, 'Smith', 'John', 'A', 201, NULL, '2022-01-15', 75000.00, 101),
    (1002, 'Johnson', 'Jane', 'B', 202, 1001, '2022-02-20', 60000.00, 104),
    (1003, 'Doe', 'Robert', 'C', 202, 1001, '2021-11-10', 65000.00, 104),
    (1004, 'Brown', 'Emily', 'D', 204, NULL, '2022-03-25', 55000.00, 102),
    (1005, 'Davis', 'Michael', 'E', 205, 1004, '2022-04-30', 50000.00, 105);

-- Insert 5 rows into the Loan table
INSERT INTO Loan (Employee_Id, Loan_Amount) VALUES
    (1001, 5000.00),
    (1002, 8000.00),
    (1003, 6000.00),
    (1004, 3000.00),
    (1005, 7500.00);
	
~Insert a new location:
INSERT INTO Location (Location_Id, Regional_Group)
VALUES (1, 'North');

~Update an employee's salary by Employee_Id:
UPDATE Employee
SET Salary = 60000
WHERE Employee_Id = 1001;

~Retrieve the names of all employees in the 'Sales' department:
SELECT Firstname, Lastname
FROM Employee
WHERE Department_Id = (SELECT Department_Id FROM Department WHERE Name = 'Sales');

~Delete an employee by Employee_Id:
DELETE FROM Employee
WHERE Employee_Id = 105;

~Calculate the average salary in the 'Finance' department:
SELECT AVG(Salary) AS AverageSalary
FROM Employee
WHERE Department_Id = (SELECT Department_Id FROM Department WHERE Name = 'Finance');

~Find the highest loan amount taken by an employee:
SELECT MAX(Loan_Amount) AS HighestLoanAmount
FROM Loan;

~List all employees and their respective managers:
SELECT E.Employee_Id, E.Firstname, E.Lastname, M.Firstname AS Manager_Firstname, M.Lastname AS Manager_Lastname
FROM Employee E
LEFT JOIN Employee M ON E.Manager_Id = M.Employee_Id;

~Count the number of employees in each department:
SELECT D.Name AS Department, COUNT(*) AS EmployeeCount
FROM Employee E
JOIN Department D ON E.Department_Id = D.Department_Id
GROUP BY D.Name;
	
1) Perform all types of JOIN operations on Employee and Loan tables.
-- INNER JOIN
SELECT Employee.Employee_Id, Employee.Lastname, Loan.Loan_Amount
FROM Employee
INNER JOIN Loan ON Employee.Employee_Id = Loan.Employee_Id;

-- LEFT JOIN
SELECT Employee.Employee_Id, Employee.Lastname, Loan.Loan_Amount
FROM Employee
LEFT JOIN Loan ON Employee.Employee_Id = Loan.Employee_Id;

-- RIGHT JOIN
SELECT Employee.Employee_Id, Employee.Lastname, Loan.Loan_Amount
FROM Employee
RIGHT JOIN Loan ON Employee.Employee_Id = Loan.Employee_Id;

-- FULL OUTER JOIN (if supported by your DBMS)
SELECT Employee.Employee_Id, Employee.Lastname, Loan.Loan_Amount
FROM Employee
FULL OUTER JOIN Loan ON Employee.Employee_Id = Loan.Employee_Id;

2) Find out no.of employees working in “Sales” department
SELECT COUNT(*) AS EmployeeCount
FROM Employee
WHERE Department_Id = (SELECT Department_Id FROM Department WHERE Name = 'Sales');

3) Find out the employees who are not working in department 10 or 30.
SELECT Employee_Id, Lastname, Firstname
FROM Employee
WHERE Department_Id NOT IN (10, 30);

4) List out the employees whose name start with “s”.
SELECT Employee_Id, Lastname
FROM Employee
WHERE Lastname LIKE 'S%';

5) List out employee id, last name in descending order based on the salary column.
SELECT Employee_Id, Lastname
FROM Employee
ORDER BY Salary DESC;

6) How many employees who are working in different departments wise in the organization
SELECT Department_Id, COUNT(*) AS EmployeeCount
FROM Employee
GROUP BY Department_Id;

7) Display the employee who got the maximum salary.
SELECT Employee_Id, Lastname, Salary
FROM Employee
WHERE Salary = (SELECT MAX(Salary) FROM Employee);

8) Update the employees’ salaries, who are working as Clerk on the basis of 10%.
UPDATE Employee
SET Salary = Salary * 1.10
WHERE Job_Id = (SELECT Job_Id FROM Job WHERE Function = 'Clerk');

9) Delete the employees who are working in accounting department.
DELETE FROM Employee
WHERE Department_Id = (SELECT Department_Id FROM Department WHERE Name = 'Accounting');

10) List out the department wise maximum salary, minimum salary, average salary of the employees
SELECT D.Name AS DepartmentName, MAX(E.Salary) AS MaxSalary, MIN(E.Salary) AS MinSalary, AVG(E.Salary) AS AvgSalary
FROM Department D
INNER JOIN Employee E ON D.Department_Id = E.Department_Id
GROUP BY D.Name;

11) How many employees who are joined in 1985.
SELECT COUNT(*) AS EmployeeCount
FROM Employee
WHERE YEAR(Hiredate) = 1985;



b) Write a PL/SQL program to find the factorial of a number.

SQL> DECLARE
2 f NUMBER:=1;
3 n NUMBER;
4 i NUMBER;
5 BEGIN
6 n:=&n;
7 FOR i IN 1..n
8 LOOP
9 f:=f*i;
10 END LOOP;
11 DBMS_OUTPUT.PUT_LINE('Factorial of '||n||' is '||f);
12 END;
13 /
Enter value for n: 5
old
6: n:=&n;
new
6: n:=5;
Factorial of 5 is 120
PL/SQL procedure successfully completed.
